/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, ElementRef, ViewChild, EventEmitter, HostListener, HostBinding } from '@angular/core';
import { NgxDropzoneService } from './ngx-dropzone.service';
export class NgxDropzoneComponent {
    /**
     * @param {?} host
     * @param {?} service
     */
    constructor(host, service) {
        this.host = host;
        this.service = service;
        this.label = 'Drop your files here (or click)';
        this.multiple = true;
        this.accept = '*';
        this.showPreviews = false;
        this.preserveFiles = true;
        this.filesAdded = new EventEmitter();
        this.disabled = false;
        this.hovered = false;
    }
    /**
     * @return {?}
     */
    showFileSelector() {
        if (!this.disabled) {
            this.fileInput.nativeElement.click();
        }
    }
    /**
     * @return {?}
     */
    reset() {
        this.service.reset();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFilesSelected(event) {
        /** @type {?} */
        const files = event.target.files;
        this.handleFileDrop(files);
    }
    /**
     * UPDATE 10.03.2019:
     * Refactored to use HostListener and HostBindings to allow
     * for easier style overwriting from outside the component.
     * @param {?} event
     * @return {?}
     */
    onDragOver(event) {
        if (this.disabled) {
            return;
        }
        this.preventDefault(event);
        this.hovered = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragLeave(event) {
        this.hovered = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDrop(event) {
        this.preventDefault(event);
        this.hovered = false;
        this.handleFileDrop(event.dataTransfer.files);
    }
    /**
     * @param {?} files
     * @return {?}
     */
    handleFileDrop(files) {
        if (this.disabled) {
            return;
        }
        this.service.parseFileList(files, this.accept, this.maxFileSize, this.multiple, this.preserveFiles, this.showPreviews)
            .then(parsedFiles => this.filesAdded.next(parsedFiles));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    preventDefault(event) {
        event.preventDefault();
        event.stopPropagation();
    }
}
NgxDropzoneComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-dropzone',
                template: `<input type="file" #fileInput class="file-input" (change)="onFilesSelected($event)" [multiple]="multiple"
  [accept]="accept" />
<div class="dropzone" (click)="showFileSelector()">
  <p *ngIf="service.previews.length === 0">{{ label }}</p>
  <div class="preview" [class.limit-width]="!p.data" *ngFor="let p of service.previews">
    <img *ngIf="p.data" [src]="p.data">
    <span *ngIf="p.data">{{ p.filename }}</span>
    <div *ngIf="!p.data" class="preview-item">
      <span>{{ p.filename }}</span>
    </div>
  </div>
</div>
`,
                styles: [`:host(){display:flex;height:180px;cursor:pointer;background:#fff;color:#717386;border:2px dashed #717386;border-radius:5px;font-size:16px}:host().hovered{border:2px solid #717386;color:#dfdfe4}:host().disabled{opacity:.5;cursor:no-drop}:host()>.dropzone{display:flex;flex-direction:row;justify-content:flex-start;align-items:center;width:100%;overflow-x:auto}:host()>.dropzone>p{margin:10px auto}:host()>.dropzone>.preview{height:80%;position:relative;text-align:center;padding:0 10px;width:-webkit-max-content;width:-moz-max-content;width:max-content}:host()>.dropzone>.preview.limit-width{max-width:25%}:host()>.dropzone>.preview>img{max-height:100%;border-radius:5px;opacity:.8}:host()>.dropzone>.preview>span{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);color:#fff}:host()>.dropzone>.preview>.preview-item{display:flex;text-align:center;align-items:center;height:100%;padding:0 40px;overflow-wrap:break-word;border-radius:5px;background-image:linear-gradient(to top,#ededed,#efefef,#f1f1f1,#f4f4f4,#f6f6f6)}:host()>.dropzone>.preview>.preview-item>span{color:#717386;max-width:100%}.file-input{display:none}`],
                providers: [NgxDropzoneService] // Create a new service instance for each component.
            },] },
];
/** @nocollapse */
NgxDropzoneComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgxDropzoneService }
];
NgxDropzoneComponent.propDecorators = {
    label: [{ type: Input }],
    multiple: [{ type: Input }],
    accept: [{ type: Input }],
    maxFileSize: [{ type: Input }],
    showPreviews: [{ type: Input }],
    preserveFiles: [{ type: Input }],
    filesAdded: [{ type: Output }],
    disabled: [{ type: HostBinding, args: ['class.disabled',] }, { type: Input }],
    hovered: [{ type: HostBinding, args: ['class.hovered',] }],
    fileInput: [{ type: ViewChild, args: ['fileInput',] }],
    onDragOver: [{ type: HostListener, args: ['dragover', ['$event'],] }],
    onDragLeave: [{ type: HostListener, args: ['dragleave', ['$event'],] }],
    onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    NgxDropzoneComponent.prototype.label;
    /** @type {?} */
    NgxDropzoneComponent.prototype.multiple;
    /** @type {?} */
    NgxDropzoneComponent.prototype.accept;
    /** @type {?} */
    NgxDropzoneComponent.prototype.maxFileSize;
    /** @type {?} */
    NgxDropzoneComponent.prototype.showPreviews;
    /** @type {?} */
    NgxDropzoneComponent.prototype.preserveFiles;
    /** @type {?} */
    NgxDropzoneComponent.prototype.filesAdded;
    /** @type {?} */
    NgxDropzoneComponent.prototype.disabled;
    /** @type {?} */
    NgxDropzoneComponent.prototype.hovered;
    /** @type {?} */
    NgxDropzoneComponent.prototype.fileInput;
    /** @type {?} */
    NgxDropzoneComponent.prototype.host;
    /** @type {?} */
    NgxDropzoneComponent.prototype.service;
}

//# sourceMappingURL=data:application/json;base64,