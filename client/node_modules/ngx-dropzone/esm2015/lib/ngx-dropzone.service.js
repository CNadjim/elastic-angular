/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
/**
 * @record
 */
export function FilePreview() { }
/** @type {?} */
FilePreview.prototype.data;
/** @type {?} */
FilePreview.prototype.filename;
/**
 * UPDATE 04.04.2019:
 * Refactored to use service class to handle any
 * logic on the dropped files to allow for easier
 * unit tests and separation of concerns.
 */
export class NgxDropzoneService {
    constructor() {
        this.fileCache = [];
        this.previews = [];
    }
    /**
     * @return {?}
     */
    reset() {
        this.fileCache = [];
        this.previews = [];
    }
    /**
     * @param {?} files
     * @param {?} accept
     * @param {?} maxFileSize
     * @param {?} multiple
     * @param {?} preserveFiles
     * @param {?} showPreviews
     * @return {?}
     */
    parseFileList(files, accept, maxFileSize, multiple, preserveFiles, showPreviews) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** *
             * UPDATE 27.01.2019:
             * Refactored the filter algorithm into one filter() method to gain
             * better performance by iterating only once.
             * See issue #1.
             *
             * UPDATE 09.03.2019:
             * Refactored to one single loop and fixed bug where disabled multiple
             * selection might return invalid (unfiltered) files.
             * Added image preview option.
             *
             * UPDATE 12.03.2019:
             * Refactored to use fileCache and emit all dropped files
             * since the last reset if [preserveFiles] is true.
              @type {?} */
            const hasFiletypeFilter = accept !== '*';
            /**
                 * UPDATE 12.03.2019:
                 * Added option to preserve preview images.
                 */
            if (!preserveFiles) {
                this.fileCache = [];
                this.previews = [];
            }
            for (let i = 0; i < files.length; i++) {
                /** @type {?} */
                const file = files.item(i);
                if (hasFiletypeFilter) {
                    if (accept.endsWith('/*')) {
                        // If a generic file type is provided, we check for a match.
                        if (accept.split('/')[0] !== file.type.split('/')[0]) {
                            continue;
                        }
                    }
                    else {
                        // Else an exact match is required.
                        if (!accept.includes(file.type)) {
                            continue;
                        }
                    }
                }
                if (maxFileSize && file.size > maxFileSize) {
                    continue;
                }
                if (!multiple && this.fileCache.length >= 1) {
                    if (!preserveFiles) {
                        // Always emit the latest file if multi-selection and preservation are disabled.
                        this.fileCache = [file];
                    }
                    else {
                        continue;
                    }
                }
                if (showPreviews) {
                    if (file.type.startsWith('image')) {
                        /** @type {?} */
                        const preview = yield this.readFile(file);
                        if (preview) {
                            this.previews.push(preview);
                        }
                    }
                    else {
                        /** @type {?} */
                        const preview = {
                            data: null,
                            filename: file.name
                        };
                        this.previews.push(preview);
                    }
                }
                this.fileCache.push(file);
            }
            return this.fileCache;
        });
    }
    /**
     * @param {?} file
     * @return {?}
     */
    readFile(file) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                /** @type {?} */
                const reader = new FileReader();
                reader.onload = e => {
                    /** @type {?} */
                    const preview = {
                        data: (/** @type {?} */ (e.target)).result,
                        filename: file.name
                    };
                    return resolve(preview);
                };
                reader.onerror = e => {
                    console.error(`FileReader failed on file ${file.name}. No preview image created.`);
                    return reject(null);
                };
                reader.readAsDataURL(file);
            });
        });
    }
}
NgxDropzoneService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NgxDropzoneService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    NgxDropzoneService.prototype.fileCache;
    /** @type {?} */
    NgxDropzoneService.prototype.previews;
}

//# sourceMappingURL=data:application/json;base64,