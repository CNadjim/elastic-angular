/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
/**
 * @record
 */
export function FilePreview() { }
/** @type {?} */
FilePreview.prototype.data;
/** @type {?} */
FilePreview.prototype.filename;
/**
 * UPDATE 04.04.2019:
 * Refactored to use service class to handle any
 * logic on the dropped files to allow for easier
 * unit tests and separation of concerns.
 */
var NgxDropzoneService = /** @class */ (function () {
    function NgxDropzoneService() {
        this.fileCache = [];
        this.previews = [];
    }
    /**
     * @return {?}
     */
    NgxDropzoneService.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.fileCache = [];
        this.previews = [];
    };
    /**
     * @param {?} files
     * @param {?} accept
     * @param {?} maxFileSize
     * @param {?} multiple
     * @param {?} preserveFiles
     * @param {?} showPreviews
     * @return {?}
     */
    NgxDropzoneService.prototype.parseFileList = /**
     * @param {?} files
     * @param {?} accept
     * @param {?} maxFileSize
     * @param {?} multiple
     * @param {?} preserveFiles
     * @param {?} showPreviews
     * @return {?}
     */
    function (files, accept, maxFileSize, multiple, preserveFiles, showPreviews) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var hasFiletypeFilter, i, file, preview, preview;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        hasFiletypeFilter = accept !== '*';
                        /**
                             * UPDATE 12.03.2019:
                             * Added option to preserve preview images.
                             */
                        if (!preserveFiles) {
                            this.fileCache = [];
                            this.previews = [];
                        }
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < files.length)) return [3 /*break*/, 6];
                        file = files.item(i);
                        if (hasFiletypeFilter) {
                            if (accept.endsWith('/*')) {
                                // If a generic file type is provided, we check for a match.
                                if (accept.split('/')[0] !== file.type.split('/')[0]) {
                                    return [3 /*break*/, 5];
                                }
                            }
                            else {
                                // Else an exact match is required.
                                if (!accept.includes(file.type)) {
                                    return [3 /*break*/, 5];
                                }
                            }
                        }
                        if (maxFileSize && file.size > maxFileSize) {
                            return [3 /*break*/, 5];
                        }
                        if (!multiple && this.fileCache.length >= 1) {
                            if (!preserveFiles) {
                                // Always emit the latest file if multi-selection and preservation are disabled.
                                this.fileCache = [file];
                            }
                            else {
                                return [3 /*break*/, 5];
                            }
                        }
                        if (!showPreviews) return [3 /*break*/, 4];
                        if (!file.type.startsWith('image')) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.readFile(file)];
                    case 2:
                        preview = _a.sent();
                        if (preview) {
                            this.previews.push(preview);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        preview = {
                            data: null,
                            filename: file.name
                        };
                        this.previews.push(preview);
                        _a.label = 4;
                    case 4:
                        this.fileCache.push(file);
                        _a.label = 5;
                    case 5:
                        i++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/, this.fileCache];
                }
            });
        });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NgxDropzoneService.prototype.readFile = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        /** @type {?} */
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            /** @type {?} */
                            var preview = {
                                data: (/** @type {?} */ (e.target)).result,
                                filename: file.name
                            };
                            return resolve(preview);
                        };
                        reader.onerror = function (e) {
                            console.error("FileReader failed on file " + file.name + ". No preview image created.");
                            return reject(null);
                        };
                        reader.readAsDataURL(file);
                    })];
            });
        });
    };
    NgxDropzoneService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgxDropzoneService.ctorParameters = function () { return []; };
    return NgxDropzoneService;
}());
export { NgxDropzoneService };
if (false) {
    /** @type {?} */
    NgxDropzoneService.prototype.fileCache;
    /** @type {?} */
    NgxDropzoneService.prototype.previews;
}

//# sourceMappingURL=data:application/json;base64,