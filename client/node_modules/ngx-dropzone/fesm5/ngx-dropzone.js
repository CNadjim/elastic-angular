import { __awaiter, __generator } from 'tslib';
import { Injectable, Component, Input, Output, ElementRef, ViewChild, EventEmitter, HostListener, HostBinding, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * UPDATE 04.04.2019:
 * Refactored to use service class to handle any
 * logic on the dropped files to allow for easier
 * unit tests and separation of concerns.
 */
var NgxDropzoneService = /** @class */ (function () {
    function NgxDropzoneService() {
        this.fileCache = [];
        this.previews = [];
    }
    /**
     * @return {?}
     */
    NgxDropzoneService.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.fileCache = [];
        this.previews = [];
    };
    /**
     * @param {?} files
     * @param {?} accept
     * @param {?} maxFileSize
     * @param {?} multiple
     * @param {?} preserveFiles
     * @param {?} showPreviews
     * @return {?}
     */
    NgxDropzoneService.prototype.parseFileList = /**
     * @param {?} files
     * @param {?} accept
     * @param {?} maxFileSize
     * @param {?} multiple
     * @param {?} preserveFiles
     * @param {?} showPreviews
     * @return {?}
     */
    function (files, accept, maxFileSize, multiple, preserveFiles, showPreviews) {
        return __awaiter(this, void 0, void 0, function () {
            var hasFiletypeFilter, i, file, preview, preview;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        hasFiletypeFilter = accept !== '*';
                        /**
                             * UPDATE 12.03.2019:
                             * Added option to preserve preview images.
                             */
                        if (!preserveFiles) {
                            this.fileCache = [];
                            this.previews = [];
                        }
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < files.length)) return [3 /*break*/, 6];
                        file = files.item(i);
                        if (hasFiletypeFilter) {
                            if (accept.endsWith('/*')) {
                                // If a generic file type is provided, we check for a match.
                                if (accept.split('/')[0] !== file.type.split('/')[0]) {
                                    return [3 /*break*/, 5];
                                }
                            }
                            else {
                                // Else an exact match is required.
                                if (!accept.includes(file.type)) {
                                    return [3 /*break*/, 5];
                                }
                            }
                        }
                        if (maxFileSize && file.size > maxFileSize) {
                            return [3 /*break*/, 5];
                        }
                        if (!multiple && this.fileCache.length >= 1) {
                            if (!preserveFiles) {
                                // Always emit the latest file if multi-selection and preservation are disabled.
                                this.fileCache = [file];
                            }
                            else {
                                return [3 /*break*/, 5];
                            }
                        }
                        if (!showPreviews) return [3 /*break*/, 4];
                        if (!file.type.startsWith('image')) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.readFile(file)];
                    case 2:
                        preview = _a.sent();
                        if (preview) {
                            this.previews.push(preview);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        preview = {
                            data: null,
                            filename: file.name
                        };
                        this.previews.push(preview);
                        _a.label = 4;
                    case 4:
                        this.fileCache.push(file);
                        _a.label = 5;
                    case 5:
                        i++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/, this.fileCache];
                }
            });
        });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NgxDropzoneService.prototype.readFile = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        /** @type {?} */
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            /** @type {?} */
                            var preview = {
                                data: (/** @type {?} */ (e.target)).result,
                                filename: file.name
                            };
                            return resolve(preview);
                        };
                        reader.onerror = function (e) {
                            console.error("FileReader failed on file " + file.name + ". No preview image created.");
                            return reject(null);
                        };
                        reader.readAsDataURL(file);
                    })];
            });
        });
    };
    NgxDropzoneService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgxDropzoneService.ctorParameters = function () { return []; };
    return NgxDropzoneService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgxDropzoneComponent = /** @class */ (function () {
    function NgxDropzoneComponent(host, service) {
        this.host = host;
        this.service = service;
        this.label = 'Drop your files here (or click)';
        this.multiple = true;
        this.accept = '*';
        this.showPreviews = false;
        this.preserveFiles = true;
        this.filesAdded = new EventEmitter();
        this.disabled = false;
        this.hovered = false;
    }
    /**
     * @return {?}
     */
    NgxDropzoneComponent.prototype.showFileSelector = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.fileInput.nativeElement.click();
        }
    };
    /**
     * @return {?}
     */
    NgxDropzoneComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.service.reset();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxDropzoneComponent.prototype.onFilesSelected = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var files = event.target.files;
        this.handleFileDrop(files);
    };
    /**
     * UPDATE 10.03.2019:
     * Refactored to use HostListener and HostBindings to allow
     * for easier style overwriting from outside the component.
     */
    /**
     * UPDATE 10.03.2019:
     * Refactored to use HostListener and HostBindings to allow
     * for easier style overwriting from outside the component.
     * @param {?} event
     * @return {?}
     */
    NgxDropzoneComponent.prototype.onDragOver = /**
     * UPDATE 10.03.2019:
     * Refactored to use HostListener and HostBindings to allow
     * for easier style overwriting from outside the component.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.disabled) {
            return;
        }
        this.preventDefault(event);
        this.hovered = true;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxDropzoneComponent.prototype.onDragLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.hovered = false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxDropzoneComponent.prototype.onDrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.preventDefault(event);
        this.hovered = false;
        this.handleFileDrop(event.dataTransfer.files);
    };
    /**
     * @param {?} files
     * @return {?}
     */
    NgxDropzoneComponent.prototype.handleFileDrop = /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        var _this = this;
        if (this.disabled) {
            return;
        }
        this.service.parseFileList(files, this.accept, this.maxFileSize, this.multiple, this.preserveFiles, this.showPreviews)
            .then(function (parsedFiles) { return _this.filesAdded.next(parsedFiles); });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxDropzoneComponent.prototype.preventDefault = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
    };
    NgxDropzoneComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-dropzone',
                    template: "<input type=\"file\" #fileInput class=\"file-input\" (change)=\"onFilesSelected($event)\" [multiple]=\"multiple\"\n  [accept]=\"accept\" />\n<div class=\"dropzone\" (click)=\"showFileSelector()\">\n  <p *ngIf=\"service.previews.length === 0\">{{ label }}</p>\n  <div class=\"preview\" [class.limit-width]=\"!p.data\" *ngFor=\"let p of service.previews\">\n    <img *ngIf=\"p.data\" [src]=\"p.data\">\n    <span *ngIf=\"p.data\">{{ p.filename }}</span>\n    <div *ngIf=\"!p.data\" class=\"preview-item\">\n      <span>{{ p.filename }}</span>\n    </div>\n  </div>\n</div>\n",
                    styles: [":host(){display:flex;height:180px;cursor:pointer;background:#fff;color:#717386;border:2px dashed #717386;border-radius:5px;font-size:16px}:host().hovered{border:2px solid #717386;color:#dfdfe4}:host().disabled{opacity:.5;cursor:no-drop}:host()>.dropzone{display:flex;flex-direction:row;justify-content:flex-start;align-items:center;width:100%;overflow-x:auto}:host()>.dropzone>p{margin:10px auto}:host()>.dropzone>.preview{height:80%;position:relative;text-align:center;padding:0 10px;width:-webkit-max-content;width:-moz-max-content;width:max-content}:host()>.dropzone>.preview.limit-width{max-width:25%}:host()>.dropzone>.preview>img{max-height:100%;border-radius:5px;opacity:.8}:host()>.dropzone>.preview>span{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);color:#fff}:host()>.dropzone>.preview>.preview-item{display:flex;text-align:center;align-items:center;height:100%;padding:0 40px;overflow-wrap:break-word;border-radius:5px;background-image:linear-gradient(to top,#ededed,#efefef,#f1f1f1,#f4f4f4,#f6f6f6)}:host()>.dropzone>.preview>.preview-item>span{color:#717386;max-width:100%}.file-input{display:none}"],
                    providers: [NgxDropzoneService] // Create a new service instance for each component.
                },] },
    ];
    /** @nocollapse */
    NgxDropzoneComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgxDropzoneService }
    ]; };
    NgxDropzoneComponent.propDecorators = {
        label: [{ type: Input }],
        multiple: [{ type: Input }],
        accept: [{ type: Input }],
        maxFileSize: [{ type: Input }],
        showPreviews: [{ type: Input }],
        preserveFiles: [{ type: Input }],
        filesAdded: [{ type: Output }],
        disabled: [{ type: HostBinding, args: ['class.disabled',] }, { type: Input }],
        hovered: [{ type: HostBinding, args: ['class.hovered',] }],
        fileInput: [{ type: ViewChild, args: ['fileInput',] }],
        onDragOver: [{ type: HostListener, args: ['dragover', ['$event'],] }],
        onDragLeave: [{ type: HostListener, args: ['dragleave', ['$event'],] }],
        onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }]
    };
    return NgxDropzoneComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgxDropzoneModule = /** @class */ (function () {
    function NgxDropzoneModule() {
    }
    NgxDropzoneModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        NgxDropzoneComponent
                    ],
                    exports: [
                        NgxDropzoneComponent
                    ]
                },] },
    ];
    return NgxDropzoneModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgxDropzoneComponent, NgxDropzoneModule, NgxDropzoneService as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,