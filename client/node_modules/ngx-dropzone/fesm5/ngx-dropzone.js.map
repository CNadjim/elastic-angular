{"version":3,"file":"ngx-dropzone.js.map","sources":["ng://ngx-dropzone/lib/ngx-dropzone.service.ts","ng://ngx-dropzone/lib/ngx-dropzone.component.ts","ng://ngx-dropzone/lib/ngx-dropzone.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nexport interface FilePreview {\n  data: string;\n  filename: string;\n}\n\n/**\n * UPDATE 04.04.2019:\n * Refactored to use service class to handle any\n * logic on the dropped files to allow for easier\n * unit tests and separation of concerns.\n */\n@Injectable()\nexport class NgxDropzoneService {\n\n  constructor() { }\n\n  private fileCache: File[] = [];\n  previews: FilePreview[] = [];\n\n  reset() {\n    this.fileCache = [];\n    this.previews = [];\n  }\n\n  async parseFileList(files: FileList, accept: string, maxFileSize: number, multiple: boolean,\n    preserveFiles: boolean, showPreviews: boolean): Promise<File[]> {\n\n    /**\n     * UPDATE 27.01.2019:\n     * Refactored the filter algorithm into one filter() method to gain\n     * better performance by iterating only once.\n     * See issue #1.\n     *\n     * UPDATE 09.03.2019:\n     * Refactored to one single loop and fixed bug where disabled multiple\n     * selection might return invalid (unfiltered) files.\n     * Added image preview option.\n     *\n     * UPDATE 12.03.2019:\n     * Refactored to use fileCache and emit all dropped files\n     * since the last reset if [preserveFiles] is true.\n     */\n    const hasFiletypeFilter = accept !== '*';\n\n    /**\n     * UPDATE 12.03.2019:\n     * Added option to preserve preview images.\n     */\n    if (!preserveFiles) {\n      this.fileCache = [];\n      this.previews = [];\n    }\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files.item(i);\n\n      if (hasFiletypeFilter) {\n        if (accept.endsWith('/*')) {\n          // If a generic file type is provided, we check for a match.\n          if (accept.split('/')[0] !== file.type.split('/')[0]) {\n            continue;\n          }\n        } else {\n          // Else an exact match is required.\n          if (!accept.includes(file.type)) {\n            continue;\n          }\n        }\n      }\n\n      if (maxFileSize && file.size > maxFileSize) {\n        continue;\n      }\n\n      if (!multiple && this.fileCache.length >= 1) {\n        if (!preserveFiles) {\n          // Always emit the latest file if multi-selection and preservation are disabled.\n          this.fileCache = [file];\n        } else {\n          continue;\n        }\n      }\n\n      if (showPreviews) {\n        if (file.type.startsWith('image')) {\n          const preview = await this.readFile(file);\n\n          if (preview) {\n            this.previews.push(preview);\n          }\n        } else {\n          const preview: FilePreview = {\n            data: null,\n            filename: file.name\n          };\n\n          this.previews.push(preview);\n        }\n      }\n\n      this.fileCache.push(file);\n    }\n\n    return this.fileCache;\n  }\n\n  private async readFile(file: File): Promise<FilePreview> {\n    return new Promise<FilePreview>((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        const preview: FilePreview = {\n          data: (e.target as FileReader).result,\n          filename: file.name\n        };\n\n        return resolve(preview);\n      };\n\n      reader.onerror = e => {\n        console.error(`FileReader failed on file ${file.name}. No preview image created.`);\n        return reject(null);\n      }\n\n      reader.readAsDataURL(file);\n    })\n  }\n}\n","import {\n  Component,\n  Input, Output, ElementRef, ViewChild,\n  AfterViewInit, EventEmitter, TemplateRef,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding\n} from '@angular/core';\nimport { NgxDropzoneService, FilePreview } from './ngx-dropzone.service';\n\n@Component({\n  selector: 'ngx-dropzone',\n  template: `<input type=\"file\" #fileInput class=\"file-input\" (change)=\"onFilesSelected($event)\" [multiple]=\"multiple\"\n  [accept]=\"accept\" />\n<div class=\"dropzone\" (click)=\"showFileSelector()\">\n  <p *ngIf=\"service.previews.length === 0\">{{ label }}</p>\n  <div class=\"preview\" [class.limit-width]=\"!p.data\" *ngFor=\"let p of service.previews\">\n    <img *ngIf=\"p.data\" [src]=\"p.data\">\n    <span *ngIf=\"p.data\">{{ p.filename }}</span>\n    <div *ngIf=\"!p.data\" class=\"preview-item\">\n      <span>{{ p.filename }}</span>\n    </div>\n  </div>\n</div>\n`,\n  styles: [`:host(){display:flex;height:180px;cursor:pointer;background:#fff;color:#717386;border:2px dashed #717386;border-radius:5px;font-size:16px}:host().hovered{border:2px solid #717386;color:#dfdfe4}:host().disabled{opacity:.5;cursor:no-drop}:host()>.dropzone{display:flex;flex-direction:row;justify-content:flex-start;align-items:center;width:100%;overflow-x:auto}:host()>.dropzone>p{margin:10px auto}:host()>.dropzone>.preview{height:80%;position:relative;text-align:center;padding:0 10px;width:-webkit-max-content;width:-moz-max-content;width:max-content}:host()>.dropzone>.preview.limit-width{max-width:25%}:host()>.dropzone>.preview>img{max-height:100%;border-radius:5px;opacity:.8}:host()>.dropzone>.preview>span{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);color:#fff}:host()>.dropzone>.preview>.preview-item{display:flex;text-align:center;align-items:center;height:100%;padding:0 40px;overflow-wrap:break-word;border-radius:5px;background-image:linear-gradient(to top,#ededed,#efefef,#f1f1f1,#f4f4f4,#f6f6f6)}:host()>.dropzone>.preview>.preview-item>span{color:#717386;max-width:100%}.file-input{display:none}`],\n  providers: [NgxDropzoneService] // Create a new service instance for each component.\n})\nexport class NgxDropzoneComponent {\n\n  constructor(\n    private host: ElementRef,\n    public service: NgxDropzoneService\n  ) { }\n\n  @Input() label = 'Drop your files here (or click)';\n  @Input() multiple = true;\n  @Input() accept = '*';\n  @Input() maxFileSize: number;\n  @Input() showPreviews = false;\n  @Input() preserveFiles = true;\n\n  @Output() filesAdded = new EventEmitter<File[]>();\n\n  @HostBinding('class.disabled') @Input() disabled = false;\n  @HostBinding('class.hovered') hovered = false;\n\n  @ViewChild('fileInput') private fileInput: ElementRef;\n\n  showFileSelector() {\n    if (!this.disabled) {\n      this.fileInput.nativeElement.click();\n    }\n  }\n\n  reset() {\n    this.service.reset();\n  }\n\n  onFilesSelected(event) {\n    const files: FileList = event.target.files;\n    this.handleFileDrop(files);\n  }\n\n  /**\n   * UPDATE 10.03.2019:\n   * Refactored to use HostListener and HostBindings to allow\n   * for easier style overwriting from outside the component.\n   */\n  @HostListener('dragover', ['$event'])\n  onDragOver(event) {\n    if (this.disabled) {\n      return;\n    }\n\n    this.preventDefault(event);\n    this.hovered = true;\n  }\n\n  @HostListener('dragleave', ['$event'])\n  onDragLeave(event) {\n    this.hovered = false;\n  }\n\n  @HostListener('drop', ['$event'])\n  onDrop(event) {\n    this.preventDefault(event);\n    this.hovered = false;\n    this.handleFileDrop(event.dataTransfer.files);\n  }\n\n  private handleFileDrop(files: FileList) {\n    if (this.disabled) {\n      return;\n    }\n\n    this.service.parseFileList(files, this.accept, this.maxFileSize,\n      this.multiple, this.preserveFiles, this.showPreviews)\n      .then(parsedFiles => this.filesAdded.next(parsedFiles));\n  }\n\n  private preventDefault(event: DragEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxDropzoneComponent } from './ngx-dropzone.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxDropzoneComponent\n  ],\n  exports: [\n    NgxDropzoneComponent\n  ]\n})\nexport class NgxDropzoneModule { }\n"],"names":[],"mappings":"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"}
